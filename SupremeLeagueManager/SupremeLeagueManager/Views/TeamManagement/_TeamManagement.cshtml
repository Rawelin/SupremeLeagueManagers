@model SupremeLeagueManager.Models.TeamTest.TeamManagementVM

<link href="~/Content/CSS/TeamManagement.css" rel="stylesheet" />

<div id="teamView">
    @if (!(@Model.Team.Name is null))
    {
        <div class="row mt-3">
            <div class="col-md-12">
                <div id="teamSquad">
                    @Html.Partial("_TeamSquad")
                </div>

                <div id="_PlayerSkills" v-if="Players.length">
                    @Html.Partial("_PlayerSkills")
                </div>

                <div id="teamSkills">
                    @Html.Partial("_TeamSkills")
                </div>

                <div class="pane ml-2" style="width: 13%" v-if="Players.length">
                    <img id="playerPhoto" v-bind:src="GetPlayeryerPhoto()" width="250" height="295" />
                </div>

                <div id="formationPitch" v-if="Players.length">
                    @Html.Partial("_FormationPitch")
                </div>

                <div id="dashboard">
                    <div><button class="btn btn-info" id="442" v-on:click="FormationChange(1)">4-4-2</button></div>
                    <div><button class="btn btn-info mt-1" id="433" v-on:click="FormationChange(2)">4-3-3</button></div>
                    <div><button class="btn btn-info mt-1" id="451" v-on:click="FormationChange(3)">4-5-1</button></div>
                    <div><button class="btn btn-info mt-1" id="352" v-on:click="FormationChange(4)">3-5-2</button></div>
                </div>
            </div>
        </div>
    }
</div>

<script type="text/javascript">

    var vueTeamView = new Vue({
        el: '#teamView',
        data: {
            Team: {},
            ProgressBarObj: {},
            Player: {},
            Players: [],
            Selected: [],
            Formation: '',
        },

        methods: {

            GetPlayer: function (index) {
                this.Player = this.Players[index];
                return this.Player;
            },

            GetPlayeryerPhoto: function () {
                var fulname = this.Players[0].Name + this.Players[0].Surname;
                fulname = fulname.replace(" ", "");
                return fulname = '/Content/Resources/Players/' + fulname + '.png';
            },

            TeamEmblem: function () {
                var fulname = this.Team.Name + this.Team.City;
                fulname = fulname.replace(" ", "");
                return fulname = '/Content/Resources/Emblems/' + fulname + '.png';
            },

            TeamFullName: function () {
                var fulname = this.Team.Name + this.Team.City;
                fulname = fulname.replace(" ", "");
                return fulname;
            },

            TShirtsPng: function () {
                var fulname = this.Team.Name + this.Team.City;
                fulname = fulname.replace(" ", "");
                return fulname = '/Content/Resources/TShirts/' + fulname + '.png';
            },

            NationalityFlag: function (index) {
                var src = '/Content/Resources/Flags/' + this.Players[index].CountryName + '.png';
                return src;
            },

            GetPlayerName: function (index) {
                var playerName = this.Players[index].Name + ' ' + this.Players[index].Surname;
                return playerName;
            },

            SwapPlayer: function (playerOne, playerTwo) {

                var Provider = {};

                Provider.PlayerOne = playerOne;
                Provider.PlayerTwo = playerTwo;
                Provider.Status = 1;

                this.ProgressBar();

                $.ajax(
                    {
                        url: "UpdateDB/TeamManagement",
                        type: "POST",
                        contentType: "application/json",
                        data: JSON.stringify({ provider: Provider }),
                        success: function (data) {
                            if (data != null) {

                            } else {
                                alert(data.ErrorMessage)
                            }
                        },
                        error: function () {
                            alert('Nieoczekiwany błąd');
                        }
                    })
            },


            FormationChange: function (formationId){

                var Provider = {}

                Provider.TeamId = this.Team.TeamId;
                Provider.FormationId = formationId;
                Provider.Status = 2;

                this.FormationColors(formationId);
                this.Formation = formationId;

                $.ajax(
                    {
                        url: "@Url.Action("UpdateDB", "TeamManagement")",
                        type: "POST",
                        contentType: "application/json",
                        data: JSON.stringify({ provider: Provider }),
                        success: function (data) {
                            if (data != null) {

                            } else {
                                alert(data.ErrorMessage)
                            }
                        },
                        error: function () {
                            alert('Nieoczekiwany błąd');
                        }
                    })
            },

            ChangePlayer: function (index) {

                // if clicked the same player again remove from array
                if (this.Selected.includes(index)) {
                    const arrayIndex = this.Selected.indexOf(index);
                    if (arrayIndex > -1) {
                        this.Selected.splice(arrayIndex, 1);
                        this.Players[index].Selected = false
                    }
                } else { // else add second player to swap
                    this.Selected.push(index);
                    this.Players[index].Selected = true;
                }
                // if array contains 2 player swap them
                if (this.Selected.length == 2) {

                    // players position in table squadTable of _TeamSqad.cshtml (the same value like field L.P of [SLM].[dbo].[dictTeamsPlayers] )
                    var playerOne = this.Selected.shift();
                    var playerTwo = this.Selected.shift();

                    // swap indexPosition L.P.
                    var indexPositionPlayerTmp = this.Players[playerOne].IndexPosition
                    this.Players[playerOne].IndexPosition = this.Players[playerTwo].IndexPosition;
                    this.Players[playerTwo].IndexPosition = indexPositionPlayerTmp;

                    // swap players position
                    var PlayerTmp = this.Players[playerOne];
                    this.Players[playerOne] = this.Players[playerTwo];
                    this.Players[playerTwo] = PlayerTmp;

                    // restore inbuts checbox to unchecked
                    this.Players[playerOne].Selected = false;
                    this.Players[playerTwo].Selected = false;

                    // send changes to DB
                    this.SwapPlayer(this.Players[playerOne], this.Players[playerTwo]);
                }
            },

            ProgressBarColor: function (stamina) {

                if (stamina >= 80) {
                    return 'progress-bar progress-bar-striped progress-bar-animated bg-success';
                } else if (stamina < 80 && stamina >= 40) {
                    return 'progress-bar progress-bar-striped progress-bar-animated bg-warning';
                } else if(stamina < 40) {
                    return 'progress-bar progress-bar-striped progress-bar-animated bg-danger';
                }
            },

            ProgressText: function (stamina) {
                if (stamina < 40) {
                    return '';
                } else {
                    return stamina + '%';
                }
            },

            FormationPitch: function (formation) {

                this.F442 = this.F433 = this.F451 = this.F352 = true;

                switch (formation) {
                    case 1:
                    this.F442 = false;
                        break;
                    case 2:
                        this.F433 = false;
                        break;
                    case 3:
                        this.F451 = false;
                        break;
                    case 4:
                        this.F352 = false;
                        break;
                }
            },

            Formation442: function () {

                $('#squadBody tr:nth-child(1)').css('background', 'rgba(255, 231, 40, 0.3)');
                for (var i = 2; i < 6; i++) {
                    $('#squadBody tr:nth-child(' + i + ')').css('background', 'rgba(56, 158, 43, 0.3)');
                }
                for (var i = 6; i < 10; i++) {
                    $('#squadBody tr:nth-child(' + i + ')').css('background', 'rgba(50, 85, 209, 0.3)');
                }
                for (var i = 10; i < 12; i++) {
                    $('#squadBody tr:nth-child(' + i + ')').css('background', 'rgba(194, 6, 21, 0.3)');
                }
                $('#formationButtons button').removeClass('active')
                $('#442').addClass('active');
            },

            Formation433: function () {

                $('#squadBody tr:nth-child(1)').css('background', 'rgba(235, 231, 40, 0.3)');
                for (var i = 2; i < 6; i++) {
                    $('#squadBody tr:nth-child(' + i + ')').css('background', 'rgba(56, 158, 43, 0.3)');
                }
                for (var i = 6; i < 9; i++) {
                    $('#squadBody tr:nth-child(' + i + ')').css('background', 'rgba(50, 85, 209, 0.3)');
                }
                for (var i = 9; i < 12; i++) {
                    $('#squadBody tr:nth-child(' + i + ')').css('background', 'rgba(194, 6, 21, 0.3)');
                }
                $('#formationButtons button').removeClass('active')
                $('#433').addClass('active');

            },

            Formation451: function () {

                $('#squadBody tr:nth-child(1)').css('background', 'rgba(235, 231, 40, 0.3)');
                for (var i = 2; i < 6; i++) {
                    $('#squadBody tr:nth-child(' + i + ')').css('background', 'rgba(56, 158, 43, 0.3)');
                }
                for (var i = 6; i < 11; i++) {
                    $('#squadBody tr:nth-child(' + i + ')').css('background', 'rgba(50, 85, 209, 0.3)');
                }
                for (var i = 11; i < 12; i++) {
                    $('#squadBody tr:nth-child(' + i + ')').css('background', 'rgba(194, 6, 21, 0.3)');
                }
                $('#formationButtons button').removeClass('active')

            },

            Formation352: function () {

                $('#squadBody tr:nth-child(1)').css('background', 'rgba(235, 231, 40, 0.3)');
                for (var i = 2; i < 5; i++) {
                    $('#squadBody tr:nth-child(' + i + ')').css('background', 'rgba(56, 158, 43, 0.3)');
                }
                for (var i = 5; i < 10; i++) {
                    $('#squadBody tr:nth-child(' + i + ')').css('background', 'rgba(50, 85, 209, 0.3)');
                }
                for (var i = 10; i < 12; i++) {
                    $('#squadBody tr:nth-child(' + i + ')').css('background', 'rgba(194, 6, 21, 0.3)');
                }
                $('#formationButtons button').removeClass('active')
                $('#352').addClass('active');

            },

            FormationColors: function (formationId) {

                switch (formationId) {
                    case 1:
                        this.Formation442();
                        this.FormationPitch(formationId);
                        break;
                    case 2:
                        this.Formation433();
                        this.FormationPitch(formationId);
                        break;
                    case 3:
                        this.Formation451();
                        this.FormationPitch(formationId);
                        break;
                    case 4:
                        this.Formation352();
                        this.FormationPitch(formationId);
                        break;
                }
            },

            HoverRow: function () {
                $('#squadBody tr').hover(
                    function () {
                        this.beforeHover = $(this).css('background-color');
                        $(this).css('background', 'rgba(200, 187, 201, 0.3)');
                    },
                    function () {
                        $(this).css('background', this.beforeHover)

                    });
            },

            ShowPlayerSkils: function (id) {

                    $('#playerSkills').css("visibility", "visible");
                    $('#nameForSkillsTable').text(this.Players[id].Name);
                    $('#surnameForSkillsTable').text(this.Players[id].Surname);
                    $('#positionForSkillsTable').text(this.Players[id].PositionShort);
                    $('#ageForSkillsTable').text(this.Players[id].Age);
                    $('#ageForSkillsTable').css('font-weight', '700');
                    $('#playerPhoto').attr('src', '/Content/Resources/Players/' + this.Players[id].Name + this.Players[id].Surname + '.png');
                    $('#playerPhoto').show();
                   $('#flag').attr('src', '/Content/Resources/Flags/' + this.Players[id].CountryName + '.png');

                    this.SkillTextColor($('#goalkeeperSkillsTable'), this.Players[id].GoalKeeper);
                    this.SkillTextColor($('#defenceForSkillsTable'), this.Players[id].Defence);
                    this.SkillTextColor($('#midfieldForSkillsTable'), this.Players[id].Midfield);
                    this.SkillTextColor($('#attackForSkillsTable'), this.Players[id].Attack);
                    this.SkillTextColor($('#divingForSkillsTable'), this.Players[id].Diving);
                    this.SkillTextColor($('#handlingForSkillsTable'), this.Players[id].Handling);
                    this.SkillTextColor($('#tacklingForSkillsTable'), this.Players[id].Tackling);
                    this.SkillTextColor($('#coveringForSkillsTable'), this.Players[id].Covering);
                    this.SkillTextColor($('#LPForSkillsTable'), this.Players[id].LongPassAccuracy);
                    this.SkillTextColor($('#SPForSkillsTable'), this.Players[id].ShortPassAccuracy);
                    this.SkillTextColor($('#shotForSkillsTable'), this.Players[id].ShotAccuracy);
                    this.SkillTextColor($('#speedForSkillsTable'), this.Players[id].Speed);
                    this.SkillTextColor($('#accelerationForSkillsTable'), this.Players[id].Acceleration);
                    this.SkillTextColor($('#reflexForSkillsTable'), this.Players[id].Reflex);
                    this.SkillTextColor($('#headingForSkillsTable'), this.Players[id].Heading);
                    this.SkillTextColor($('#shotPowerForSkillsTable'), this.Players[id].ShotPower);
                    this.SkillTextColor($('#techniqueForSkillsTable'), this.Players[id].Technique);
                    this.SkillTextColor($('#enduranceForSkillsTable'), this.Players[id].Endurance);
                    this.SkillTextColor($('#staminaForSkillsTable'), this.Players[id].Stamina);
                    this.SkillTextColor($('#avgSkillsForSkillsTable'), this.Players[id].AverageSkills);
                    this.SkillTextColor($('#avgDynSkillsForSkillsTable'), this.Players[id].AverageDynamicSkills);

                    var differ = this.Players[id].AverageDynamicSkills - this.Players[id].AverageSkills;

                    if (id < 11) {
                        this.SkillTextColor($('#avgDiffForSkillsTable'), differ);
                    } else {
                        this.SkillTextColor($('#avgDiffForSkillsTable'), 0);
                    }
            },

            SetPlayersAverageSkills: function () {

                for (var i = 0; i < this.Players.length; i++) {
                    this.PlayerSkill(this.Players[i]);
                }
            },

            PlayerSkill: function (player) {
                this.Player = player

                switch (this.Player.PositionShort) {
                    case 'GK':
                        this.Player.AverageSkills = (this.Player.GoalKeeper + this.Player.Diving + this.Player.Handling + this.Player.Reflex) / 4;
                        this.Player.AverageSkills = this.Player.AverageSkills.toFixed(0);
                        break;
                    case 'CB':
                        this.Player.AverageSkills = (this.Player.Defence + this.Player.Tackling + this.Player.Covering + this.Player.Heading + this.Player.Speed + this.Player.Acceleration) / 6;
                        this.Player.AverageSkills = this.Player.AverageSkills.toFixed(0);
                        break;
                    case 'LB':
                    case 'RB':
                        this.Player.AverageSkills = (this.Player.Defence + this.Player.Attack + this.Player.Technique + this.Player.LongPassAccuracy + this.Player.Speed + this.Player.Acceleration) / 6;
                        this.Player.AverageSkills = this.Player.AverageSkills.toFixed(0);
                        break;
                    case 'DM':
                        this.Player.AverageSkills = (this.Player.Defence + this.Player.Midfield + this.Player.Tackling + this.Player.Covering + this.Player.Speed + this.Player.Acceleration) / 6;
                        this.Player.AverageSkills = this.Player.AverageSkills.toFixed(0);
                        break;
                    case 'CM':
                        this.Player.AverageSkills = (this.Player.Midfield + this.Player.ShortPassAccuracy + this.Player.LongPassAccuracy + this.Player.Technique +
                        this.Player.Speed + this.Player.Acceleration) / 6;
                        this.Player.AverageSkills = this.Player.AverageSkills.toFixed(0);
                        break;
                    case 'LM':
                    case 'RM':
                        this.Player.AverageSkills = (this.Player.Midfield + this.Player.Attack + this.Player.Technique + this.Player.LongPassAccuracy + this.Player.Speed + this.Player.Acceleration) / 6;
                        this.Player.AverageSkills = this.Player.AverageSkills.toFixed(0);
                        break;
                    case 'AM':
                        this.Player.AverageSkills = (this.Player.Midfield + this.Player.Attack + this.Player.Technique + this.Player.ShortPassAccuracy +
                        this.Player.LongPassAccuracy + this.Player.ShotPower + this.Player.ShotAccuracy + this.Player.Speed + this.Player.Acceleration) / 9;
                        this.Player.AverageSkills = this.Player.AverageSkills.toFixed(0);
                        break;
                    case 'LW':
                    case 'RW':
                        this.Player.AverageSkills = (this.Player.Attack + this.Player.Technique + this.Player.ShortPassAccuracy + this.Player.LongPassAccuracy + this.Player.ShotPower +
                        this.Player.ShotAccuracy + this.Player.Speed + this.Player.Acceleration) / 8;
                        this.Player.AverageSkills = this.Player.AverageSkills.toFixed(0);
                        break;
                    case 'SS':
                        this.Player.AverageSkills = (this.Player.Midfield + this.Player.Attack + this.Player.Technique + this.Player.ShortPassAccuracy + this.Player.ShotPower +
                        this.Player.ShotAccuracy + this.Player.Speed + this.Player.Acceleration) / 8;
                        this.Player.AverageSkills = this.Player.AverageSkills.toFixed(0);
                        break;
                    case 'CF':
                        this.Player.AverageSkills = (this.Player.Attack + this.Player.Technique + this.Player.ShortPassAccuracy + this.Player.ShotPower + this.Player.ShotAccuracy +
                        this.Player.Speed + this.Player.Acceleration) / 7;
                        this.Player.AverageSkills = this.Player.AverageSkills.toFixed(0);
                        break;
                    default:
                        break;
                }
            },

            SkillTextColor: function (item, value) {

                value = Math.round(value);
                item.text(value);

                if (value >= 95) {
                    item.css('color', "red");
                    item.css('font-weight', '700');
                } else if (value >= 90 && value < 95) {
                    item.css('color', "indianred");
                    item.css('font-weight', '700');
                } else if (value >= 80 && value < 90) {
                    item.css('color', "orange");
                    item.css('font-weight', '700');
                } else if (value >= 70 && value < 80) {
                    item.css('color', "lightgreen");
                    item.css('font-weight', '700');
                }
                else {
                    item.css('color', "white");
                    item.css('font-weight', '700');
                }
            },

            ProgressBar: function () {

                $('#squadBody .progress-bar').each(function () {

                    var text = $(this).text();

                    if ($(this).text() > 80) {
                        $(this).addClass('bg-success');
                        $(this).text('' + text + '%');
                    } else if ($(this).text() < 80 && $(this).text() >= 40) {
                        $(this).addClass('bg-warning');
                        $(this).text('' + text + '%');
                    } else if ($(this).text() < 40) {
                        $(this).addClass('bg-danger');
                        $(this).text('');
                    }
                });
            },

            FormationMenu: function () {
                $('#dashboard').hover(
                    function () {
                        $(this).stop().animate(
                            {
                                right: '5',
                            },
                            500,
                            'easeInSine'
                        );
                    },
                    function () {
                        $(this).stop().animate(
                            {
                                right: '-80',
                            },
                            1500,
                            'easeOutBounce'
                        );
                    });
            },

            ScrollOff: function () {
                $("body").css("overflow", "hidden");
                $("body").css("overflow-x", "hidden");
                $("body").css("overflow-y", "hidden");
            }
        },

        computed:{

        },


        created: function () {
            this.Team =  @Html.Raw(Json.Encode(Model.Team));
            this.Players =  @Html.Raw(Json.Encode(Model.Team.Players));
            this.Formation = @Html.Raw(Json.Encode(Model.Team.Formation));
            this.FormationPitch(this.Formation);
        },

        beforeMount() {

        },

        mounted() {
            this.SetPlayersAverageSkills();
            this.FormationColors(this.Formation);
            this.HoverRow();
            this.FormationMenu()
            this.ScrollOff();
        },
        updated() {


        },

        watch: {

        }
    })

</script>




