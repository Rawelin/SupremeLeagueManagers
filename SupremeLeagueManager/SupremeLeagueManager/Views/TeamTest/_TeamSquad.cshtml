@model SupremeLeagueManager.Models.TeamTest.TeamTestVM

<table class="table table-bordered table-striped table-sm ml-3" id="squadTable" style="width: 25%; float:left">
    <thead  style="font-size:13px">
        <tr>
            <th colspan="8" class="text-center">
                <div style="display: inline-block; float:left"><img src="~/Content/Resources/Emblems/@Model.Team.GetEmblemsName()" width="50" height="50" /></div>
                <div style="display: inline-block;"><div style="font-size:25px">@Model.Team.GetFullName()</div></div>
                <div style="display: inline-block; float:right"><img src="~/Content/Resources/Emblems/@Model.Team.GetEmblemsName()" width="50" height="50" /></div>
            </th>
        </tr>
        <tr class="text-center">
            <th style="width: 40%">Name</th>
            <th style="width: 10%">Flag</th>
            <th style="width: 10%">Pos</th>
            <th style="width: 10%">Age</th>
            <th style="width: 10%">App</th>
            <th style="width: 10%">Gls</th>
            <th style="width: 10%">Skl</th>
            <th style="width: 10%">Dyn</th>
        </tr>
    </thead>
    <tbody id="squadBody" style="font-size:13px">
        @for (int i = 0; i < Model.Team.Players.Count; i++)
        {
            <tr class="text-center" onmouseover="showPlayerSkills('@i')" style="vertical-align:middle;">
                <td style="display:none"><input type="checkbox" value="@i" class="checker" /></td>
                <td class="text-left">@Model.Team.Players.ElementAt(i).GetFullName()</td>
                <td><img src="~/Content/Resources/Flags/@Model.Team.Players.ElementAt(i).GetNationalityFlag()" width="24" height="24" /></td>
                <td>@Model.Team.Players.ElementAt(i).Position</td>
                <td>@Model.Team.Players.ElementAt(i).Age</td>
                <td></td>
                <td></td>
                <td> @Html.Raw(String.Format("{0:####}", @Model.Team.Players.ElementAt(i).GetAverageSkills()))</td>
                <td> @Html.Raw(String.Format("{0:####}", @Model.Team.Players.ElementAt(i).GetAverageDynamicSkills(@i, @Model.Team.Formation)))</td>
            </tr>
        }
    </tbody>
</table>

<script type="text/javascript">

     var formation = @Html.Raw(Json.Encode(Model.Team.Formation));

    switch (formation) {
        case 1:
           formation442();
           break;
        case 2:
           formation433();
           break;
        case 3:
           formation451();
            break;
        case 4:
           formation352();
           break;
    }

    $('#442').click(function () {
        formation442();
    });
    $('#433').click(function () {
        formation433();
    });
    $('#451').click(function () {
        formation451();
    });
    $('#352').click(function () {
        formation352();
    });

    var counter = 0;
    var selected = 3;
    var beforeHover;
    var selectedClicked;
    var firstClicked;
    var selectedRow;
   
    $('#squadBody tr').on({

        'click': function () {
            if (counter < 2) {
                var input = $(this).find("input.checker");
                // if the same row is clicked second time 
                if (input.is(':checked')) {

                    // restores original background colourcif row is unclicked
                    $(this).css('background', selectedClicked);
                    selected = 2;

                    input.prop('checked', false);
                    counter--;

                }// if row is clicked
                else if (input.not(':checked')) {
                    input.prop('checked', true);
                    selectedRow = $(this).css('background', 'rgba(65, 107, 130, 0.5)');

                    selected = 1;
                    counter++;

                    //keeps background colour of clicked row in case of unclicking to restore original background
                    if (counter == 1) {
                        selectedClicked = beforeHover;
                    }
                }
            }// if second row is clicked 2 value of inputs are pushed to array and send to changPlayer(array) function
            if (counter == 2) {
                  var arrayOfSelected = new Array();
                  $('#squadBody input[type="checkbox"]:checked').each(function () {
                      arrayOfSelected.push($(this).val());
                  });
                  changePlayer(arrayOfSelected);
            }
        },

        'mouseover': function () {
            beforeHover = $(this).css('background-color'); // keeps row background colour before hovering in order to restore original bc after leaving row
            $(this).css('background', 'rgba(200, 187, 201, 0.7)');
        },

        'mouseout': function () {
            switch (selected) {
                case 1: // selected row background color
                    $(this).css('background', selectedRow);
                    selected = 3;
                    break;    
                case 2: // first clicked row background color
                    $(this).css('background', selectedClicked);
                    selected = 3;
                    break;
                case 3: // hovered row background color
                    $(this).css('background', beforeHover);
                    break;
            }
        }
    });


    function formation442() {
        $('#squadBody tr:nth-child(1)').css('background', 'rgba(235, 231, 40, 0.7)');
        for (var i = 2; i < 6; i++) {
            $('#squadBody tr:nth-child(' + i + ')').css('background', 'rgba(56, 158, 43, 0.7)');
        }
        for (var i = 6; i < 10; i++) {
            $('#squadBody tr:nth-child(' + i + ')').css('background', 'rgba(50, 85, 209, 0.7)');
        }
        for (var i = 10; i < 12; i++) {
            $('#squadBody tr:nth-child(' + i + ')').css('background', 'rgba(194, 6, 21, 0.7)');
        }
        $('#formationButtons button').removeClass('active')
        $('#442').addClass('active');
    }

    function formation433() {
        $('#squadBody tr:nth-child(1)').css('background', 'rgba(235, 231, 40, 0.7)');
        for (var i = 2; i < 6; i++) {
            $('#squadBody tr:nth-child(' + i + ')').css('background', 'rgba(56, 158, 43, 0.7)');
        }
        for (var i = 6; i < 9; i++) {
            $('#squadBody tr:nth-child(' + i + ')').css('background', 'rgba(50, 85, 209, 0.7)');
        }
        for (var i = 9; i < 12; i++) {
            $('#squadBody tr:nth-child(' + i + ')').css('background', 'rgba(194, 6, 21, 0.7)');
        }
        $('#formationButtons button').removeClass('active')
        $('#433').addClass('active');
    }

    function formation451() {
        $('#squadBody tr:nth-child(1)').css('background', 'rgba(235, 231, 40, 0.7)');
        for (var i = 2; i < 6; i++) {
            $('#squadBody tr:nth-child(' + i + ')').css('background', 'rgba(56, 158, 43, 0.7)');
        }
        for (var i = 6; i < 11; i++) {
            $('#squadBody tr:nth-child(' + i + ')').css('background', 'rgba(50, 85, 209, 0.7)');
        }
        for (var i = 11; i < 12; i++) {
            $('#squadBody tr:nth-child(' + i + ')').css('background', 'rgba(194, 6, 21, 0.7)');
        }
        $('#formationButtons button').removeClass('active')
        $('#451').addClass('active');
    }

    function formation352() {
        $('#squadBody tr:nth-child(1)').css('background', 'rgba(235, 231, 40, 0.7)');
        for (var i = 2; i < 5; i++) {
            $('#squadBody tr:nth-child(' + i + ')').css('background', 'rgba(56, 158, 43, 0.7)');
        }
        for (var i = 5; i < 10; i++) {
            $('#squadBody tr:nth-child(' + i + ')').css('background', 'rgba(50, 85, 209, 0.7)');
        }
        for (var i = 10; i < 12; i++) {
            $('#squadBody tr:nth-child(' + i + ')').css('background', 'rgba(194, 6, 21, 0.7)');
        }
        $('#formationButtons button').removeClass('active')
        $('#352').addClass('active');
    }

    function showPlayerSkills(id) {

        var players = @Html.Raw(Json.Encode(Model.Team.Players));

        var nationalityNum = players[id].Nationality;
        var country
        switch (nationalityNum) {
            case 10:
                country = "Argentina";
                break;
            case 20:
                country = "Belgium";
                break;
            case 30:
                country = "Brazil";
                break;
            case 107:
                country = "Colombia";
                break;
            case 39:
                country = "Croatia";
                break;
            case 61:
                country = "France";
                break;
            case 149:
                country = "Germany";
                break;
            case 190:
                country = "Serbia";
                break;
            case 82:
                country = "Spain";
                break;
            case 223:
                country = "Uruguay";
                break;
            case 250:
                country = "Wales";
                break;
        }

    
    
        $('#playerSkills').css("visibility", "visible");
        $('#nameForSkillsTable').text(players[id].Name);
        $('#surnameForSkillsTable').text(players[id].Surname);
        $('#positionForSkillsTable').text(players[id].Position);
        $('#ageForSkillsTable').text(players[id].Age);
        $('#flag').attr('src', '/Content/Resources/Flags/' + country + '.png');
       
        colors($('#goalkeeperSkillsTable'), players[id].GoalKeeper);
        colors($('#defenceForSkillsTable'), players[id].Defence);
        colors($('#midfieldForSkillsTable'), players[id].Midfield);
        colors($('#attackForSkillsTable'), players[id].Attack);
        colors($('#divingForSkillsTable'), players[id].Diving);
        colors($('#handlingForSkillsTable'), players[id].Handling);
        colors($('#tacklingForSkillsTable'), players[id].Tackling);
        colors($('#coveringForSkillsTable'), players[id].Covering);
        colors($('#LPForSkillsTable'), players[id].LongPassAccuracy);
        colors($('#SPForSkillsTable'), players[id].ShortPassAccuracy);
        colors($('#shotForSkillsTable'), players[id].ShotAccuracy);
        colors($('#speedForSkillsTable'), players[id].Speed);
        colors($('#accelerationForSkillsTable'), players[id].Acceleration);
        colors($('#reflexForSkillsTable'), players[id].Reflex);
        colors($('#headingForSkillsTable'), players[id].Heading);
        colors($('#shotPowerForSkillsTable'), players[id].ShotPower);
        colors($('#techniqueForSkillsTable'), players[id].Technique);
        colors($('#enduranceForSkillsTable'), players[id].Endurance);
        colors($('#staminaForSkillsTable'), players[id].Stamina);
        colors($('#avgSkillsForSkillsTable'), players[id].AverageSkills);
        colors($('#avgDynSkillsForSkillsTable'), players[id].AverageDynamicSkills);

        var differ = players[id].AverageDynamicSkills - players[id].AverageSkills;

        if (id < 11) {
            colors($('#avgDiffForSkillsTable'), differ);
        } else {
            colors($('#avgDiffForSkillsTable'), 0);
        }


      
    }

    function colors(item,value) {

        value = Math.round(value);

        item.text(value);

        if (value >= 95) {
            item.css('color', "darkred");
        } else if (value >= 90 && value < 95) {
            item.css('color', "red");
        } else if (value >= 80 && value < 90) {
            item.css('color', "orange");
        } else if (value >= 70 && value < 80) {
            item.css('color', "forestgreen");
        }
        else {
            item.css('color', "black");
        }
    }

    function changePlayer(arrayOfSelected) {

        var teamId = @Html.Raw(Json.Encode(Model.Team.TeamId));
        var formation =  @Html.Raw(Json.Encode(Model.Team.Formation));

        var Provider = {};

        Provider.TeamId = teamId;
        Provider.FormationId = formation;
        Provider.Player1 = arrayOfSelected[0];
        Provider.Player2 = arrayOfSelected[1];
        Provider.Status = 3;

        $.ajax(
            {
                url: "_TeamSquad/TeamTest",
                type: "POST",
                contentType: "application/json",
                data: JSON.stringify({ provider: Provider }),
                success: function () {

                },
                error: function () {
                    alert('Nieoczekiwany błąd');
                }
            })
            .done(function (partialViewResult) {
                $("#teamSquad").html(partialViewResult);
            });

        $.ajax(
            {
                url: "_TeamSkills/TeamTest",
                type: "POST",
                contentType: "application/json",
                data: JSON.stringify({ provider: Provider }),
                success: function () {

                },
                error: function () {
                    alert('Nieoczekiwany błąd');
                }
            })
            .done(function (partialViewResult) {
                $("#teamSkills").html(partialViewResult);
            });

    }

</script>
