
<div id="matchBoardView" style="display: none">
    <div class="text-center">
        <h1>Week {{Season.week + 1}}</h1>
        <div class="container-board">
            <div class="row col-12">
                <div class="col-4 p-0" v-for="(value, index) in MatchWeek()">
                    <div class="pane pane-height p-0 pt-3">
                        <div class="row col-12">
                            <div class="text-right w-50">
                                {{ value.Item1.Name }} {{ value.Item1.City }}
                                <img v-bind:src="EmblemName(value.Item1.Name, value.Item1.City)" alt="Emblem" />
                                {{ value.Item1.MatchStatistics.HomeGoals }}
                                <div v-for="scorer in  value.Item1.MatchStatistics.HomeScorers" class="scorers">
                                    {{ scorer.ScorerData }}
                                    <div class="assistants"><em>({{ scorer.AssistantName }})</em></div>
                                </div>
                            </div>
                            <div class="text-center w-10">vs</div>
                            <div class="text-left w-45">
                                {{ value.Item2.MatchStatistics.AwayGoals }}
                                <img v-bind:src="EmblemName(value.Item2.Name, value.Item2.City)" alt="Emblem" />
                                {{ value.Item2.Name }}  {{ value.Item2.City }}
                                <div v-for="scorer in  value.Item2.MatchStatistics.AwayScorers" class="scorers">
                                    {{ scorer.ScorerData }}
                                    <div class="assistants"><em>({{ scorer.AssistantName }})</em></div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-4 p-0"></div>
                <div class="text-center col-4 p-0">
                    <div class="simulate pane" v-on:click="Simulate()">Simulate</div>
                </div>
                <div class="col-4 p-0"></div>
            </div>
        </div>
    </div>
</div>

<script src="~/Scripts/GlobalFunctions/ComputerAI.js"></script>
<script src="~/Scripts/GlobalFunctions/MatchAlgorithms.js"></script>
<script type="text/javascript">

    var vueMatchBoard = new Vue({
        el: '#matchBoardView',

        data: {
            Teams: [],
            Fixtures: [],
            HomeTeam: {},
            AwayTeam: {},
            UserTeam: {},
            SinglePlayer: {},
            MatchStatistics: {},
            Template: {},
            Season: { year: 0, week: 0, month: 0, day: 0, firstMatchDay: 0, numberOfRestDays: 0, monthName: '' },
            Index: 0
        },

        methods: {
            MatchWeek: function () {
                return this.Fixtures[this.Season.week];
            },

            EmblemName: function (name, city) {
                var fulName = name + city;
                fulName = fulName.replace(" ", "");
                return fulName = '/Content/Resources/Emblems/' + fulName + '.png';
            },

            Simulate: function () {
                if (this.Index < 9) {
                    this.SimulateAsync();
                  /*  alert(this.Index);*/
                }
               
             /*   alert(this.Index);*/
                /*  }*/


            },

            SimulateMatch: function () {
                return new Promise((resolve, reject) => {
                    this.MatchStatistics.MatchLength = Math.floor(Math.random() * 6) + 90
                    this.MatchStatistics.IntervalId = setInterval(this.CounterStart, 0);
                });
            },

            SimulateAsync: async function () {
                await this.IfUserTeam();
                await this.SetTeams();
                if (this.IfUserTeam()) {
                    alert('Match Time !!!');
                } else {
                    await this.SimulateMatch();
                }
               
            },

            IfUserTeam: function () {
                if (this.Fixtures[this.Season.week][this.Index].Item1.TeamId == this.UserTeam.TeamId) {
                    return true;
                }
                if (this.Fixtures[this.Season.week][this.Index].Item2.TeamId == this.UserTeam.TeamId) {
                    return true;
                }
            },

            SetTeams: function () {
                var homeTeamId = this.Fixtures[this.Season.week][this.Index].Item1.TeamId
                var awayTeamId = this.Fixtures[this.Season.week][this.Index].Item2.TeamId

                this.HomeTeam = this.Teams.find(t => t.TeamId == homeTeamId)
                this.AwayTeam = this.Teams.find(t => t.TeamId == awayTeamId)

            },

            CounterStart: function () {

                this.MatchStatistics.Counter++;
                if (this.MatchStatistics.Counter == this.MatchStatistics.MatchLength) {
                    clearInterval(this.MatchStatistics.IntervalId);
                    this.MatchStatistics.Counter = 0;
                    this.NextMatch();
                }
                //else if (this.MatchStatistics.Counter == (this.MatchStatistics.MatchLength / 2).toFixed(0)) {
                //    this.PauseMatch();

                //}
                MatchAlhorithms(this.HomeTeam, this.AwayTeam, this.MatchStatistics);

            },

            NextMatch: function () {
                let mathchStats = JSON.parse(JSON.stringify(this.MatchStatistics));
                this.Fixtures[this.Season.week][this.Index].Item1.MatchStatistics = mathchStats;
                this.Fixtures[this.Season.week][this.Index].Item2.MatchStatistics = mathchStats;
                this.Index++;
                this.MatchStatistics = JSON.parse(JSON.stringify(this.Template));
            }
        },

        created: function () {
            this.MatchStatistics = vueSinglePlayer.MatchStatistics;
            this.Template = JSON.parse(JSON.stringify(this.MatchStatistics));
            this.Fixtures = vueCalendar.Fixtures;
            this.Season = vueCalendar.Season;
            this.Teams = vueSinglePlayer.Teams;
            this.SinglePlayer = vueCalendar.SinglePlayer;
            this.UserTeam = vueSinglePlayer.Teams.find(t => t.TeamId == this.SinglePlayer.IdTeam);

        },

        mounted: function () {
            $('#matchBoardView').show();
            console.log(this.Teams);
            console.log(this.Fixtures);
        }
    });

</script>
