
<div id="calendarView" style="display: none">
    @*<h1 class="text-center">Calendar</h1>*@
    <div id="calendar" class="calendar">
        <div class="month">
            <ul>
                <li class="prev" v-on:click="PreviousMonth()" title="Previous month">&#10094;</li>
                <li class="next" v-on:click="NextMonth()" title="Next month">&#10095;</li>
                <li>
                    <b>{{Season.monthName}}</b>  <br>
                    <span style="font-size:18px;"><b>{{Season.year}}</b></span>
                </li>
            </ul>
        </div>
        <ul class="weekdays">
            <li>Mo</li>
            <li>Tu</li>
            <li>We</li>
            <li>Th</li>
            <li>Fr</li>
            <li>Sa</li>
            <li>Su</li>
        </ul>
        <ul class="days">
            <li v-for="(value, index) in Days" v-on:mouseover="Fixture(value)" v-on:mouseleave="HideFixture()"><span :id="'sp' + index">{{value}}</span></li>
        </ul>
        <div class="text-center">
            <div id="nextDayBtn" class="nextday pane" v-on:click="NextDay()">Next Day</div>
        </div>
    </div>

    @*Dialog Fixture-------------------------------------------------------------------------------------------------------*@
    <div id="fixtureDialog" class="pane">
        <div>
            <table class="table table-dark table-striped table-sm table-standing table-fixture font-12">
                <thead>
                    <tr>
                        <th colspan="3">Week {{Season.week + 1}}</th>
                    </tr>
                </thead>
                <tbody>
                    <tr v-for="(value, index) in MatchWeek()">
                        <td class="text-right" style="width:45%">
                            {{value.Item1.Name}} {{value.Item1.City}}
                            <img v-bind:src="EmblemName(value.Item1.Name, value.Item1.City)" alt="Emblem" />
                        </td>
                        <td>vs</td>
                        <td class="text-left" style="width:45%">
                            <img v-bind:src="EmblemName(value.Item2.Name, value.Item2.City)" alt="Emblem" />
                            {{value.Item2.Name}}  {{value.Item2.City}}
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>

</div>

<script type="text/javascript">
    var vueCalendar = new Vue({
        el: '#calendarView',
        data: {
            Fixtures: [],
            Days: [],
            MatchDays: [],
            MatchDaysDividedByMonths: [],
            SinglePlayer: {},
            Season: { year: 0, week: 0, month: 0, day: 0, firstMatchDay: 0, numberOfRestDays: 0, monthName: '' },
            NumberOfDaysInMonth: 0,
            CurrentDay: 0,
            DaysBefore: 0,
            Index: 0,
            Week: 0,
            Flag: false,
        },
        methods: {

            EmblemName: function (name, city) {
                var fulName = name + city;
                fulName = fulName.replace(" ", "");
                return fulName = '/Content/Resources/Emblems/' + fulName + '.png';
            },

            MatchWeek: function () {
                return this.Fixtures[this.Season.week];
            },

            Fixture: function (value) {
                if (this.PlaingMonthChecker()) {
                    var month = this.ArrayMonthMaker()
                    for (let i = 0; i < this.MatchDaysDividedByMonths[month].length; i++) {
                        if (value == this.MatchDaysDividedByMonths[month][i].day) {
                            this.Season.week = this.MatchDaysDividedByMonths[month][i].week;
                            $('#fixtureDialog').show();
                            //$('#fixtureDialog').position({
                            //    of: $('#calendar')
                            //});
                        }
                    }
                }

            },

            HideFixture: function () {
                //$('#fixtureDialog').hide();
            },

            PreviousMonth: function () {
                this.Days = [];
                this.Season.month--;
                if (this.Season.month == 0) {
                    this.Season.year--;
                    this.Season.month = 12;
                }
                this.SetCalendarMonth(this.Season.year, this.Season.month);
                this.MatchDaysSelector();
            },

            NextMonth: function () {
                this.Days = [];
                this.Season.month++;
                if (this.Season.month > 12) {
                    this.Season.year++;
                    this.Season.month = 1;
                }
                this.SetCalendarMonth(this.Season.year, this.Season.month);
                this.MatchDaysSelector();
            },

            NextDay: function () {

                if (this.Season.month == this.SinglePlayer.Month) {
                    this.Season.day++;
                    this.SinglePlayer.Day++;
                    if (this.CurrentDay == this.NumberOfDaysInMonth) {
                        this.Flag = true;
                        if (this.Season.month == 12) {
                            this.SinglePlayer.Year++;
                            this.SinglePlayer.Month = 1;
                            this.SinglePlayer.Day = 1;
                        } else {
                            this.SinglePlayer.Month++;
                        }
                        var theDay = $('#sp' + this.Index.toString());
                        theDay.css('color', 'white');

                        this.NextMonth();
                        this.CurrentDay = 1;
                    } else {
                        var theDay = $('#sp' + this.Index.toString());
                        theDay.css('color', 'white');
                        this.CurrentDay++;
                        this.Index++;
                        theDay = $('#sp' + this.Index.toString());
                        theDay.css('color', 'rgb(91, 192, 245)');
                    }
                }
                else {
                    this.Days = [];
                    this.Season.year = this.SinglePlayer.Year;
                    this.Season.month = this.SinglePlayer.Month;
                    this.SetCalendarMonth(this.Season.year, this.Season.month);
                    theDay = $('#sp' + this.Index.toString());
                    theDay.css('color', 'rgb(91, 192, 245)');
                }
                this.MatchDaysSelector();
                //this.DayIncrementation();
            },

            SetCalendarMonth: function (year, month) {
                this.SetCalendarDays(year, month);
                this.SetMonthName(year, month);
                this.SetFlagForNextMonth();
                this.MarkCurrentDay();
            },

            SetCalendarDays: function (year, month) {
                const numberOfTheFirstDayOfMonth = new Date(year, month - 1, 1);
                this.DaysBefore = numberOfTheFirstDayOfMonth.getDay() - 1 < 0 ? 6 : numberOfTheFirstDayOfMonth.getDay() - 1;
                for (var i = 0; i < this.DaysBefore; i++) {
                    this.Days.push(' ');
                }
                this.NumberOfDaysInMonth = new Date(year, month, 0).getDate();
                for (var i = 1; i <= this.NumberOfDaysInMonth; i++) {
                    this.Days.push(i);
                }
            },

            SetFlagForNextMonth: function () {
                if (this.Flag) {
                    this.Index = this.DaysBefore;
                    this.Flag = false;
                }
            },

            MarkCurrentDay: function () {
                var currentDay = $('#sp' + this.Index.toString());
                if (this.Season.month == this.SinglePlayer.Month) {
                    currentDay.css('color', 'rgb(91, 192, 245)');
                } else {
                    currentDay.css('color', 'white');
                }
            },

            SetMonthName: function (year, month) {
                const monthNumber = new Date(year, month - 1, 1);
                const monthName = monthNumber.toLocaleString('eng', { month: 'long' });
                this.Season.monthName = monthName;
            },

            FirstDay: function () {
                this.CurrentDay = new Date(this.Season.year, 0, this.Season.day + 1).getUTCDate() - 1;
                const date = new Date(this.Season.year, this.Season.month - 1, 1);
                var daysBefore = date.getDay() - 1 < 0 ? 0 : date.getDay() - 1;
                this.Index = this.CurrentDay + daysBefore;
                this.CurrentDay++;
                var theDay = $('#sp' + this.Index.toString());
                theDay.css('color', 'rgb(91, 192, 245)');
            },

            SeasonStart: function () {
                this.SetPlayingDaysDividedByMonths(this.SetPlayingDaysOfMonth(this.SetMatchDays()));
            },

            SetMatchDays: function () {
                var startDay = this.Season.firstMatchDay;
                this.SeasonStartDay = new Date(this.Season.year, 0, startDay).getUTCDate();
                var matchDays = [startDay];
                var numberOfdaysInYear = daysOfaYear(this.Season.year)

                for (var i = 0; i < this.Fixtures.length - 1; i++) {
                    startDay += this.Season.numberOfRestDays;
                    matchDays.push(startDay);
                    if (startDay >= numberOfdaysInYear) {
                        startDay = 1;
                    }
                }
                return matchDays;
            },

            SetPlayingDaysOfMonth: function (matchDays) {
                var playingDaysofMonth = [];
                for (var i = 0; i < matchDays.length; i++) {
                    var matchDaysOfMonth = new Date(this.Season.year, 0, matchDays[i]).getUTCDate();
                    playingDaysofMonth.push(matchDaysOfMonth);
                }
                return playingDaysofMonth;
            },

            SetPlayingDaysDividedByMonths: function (playingDaysOfMonth) {
                var playingDaysInCurrentMonth = [];
                var counter = 0;
                for (var i = 0; i < playingDaysOfMonth.length; i++) {
                    if (playingDaysOfMonth[i] < playingDaysOfMonth[i - 1]) {
                        this.MatchDaysDividedByMonths.push(playingDaysInCurrentMonth);
                        playingDaysInCurrentMonth = [];
                    }

                    var pair = { day: playingDaysOfMonth[i], week: counter };
                    playingDaysInCurrentMonth.push(pair);
                    counter++;
                }
                this.MatchDaysDividedByMonths.push(playingDaysInCurrentMonth);
            },

            MatchDaysSelector: function () {
                this.ClearColoredDays();
                this.PlayingMathMaker(this.ArrayMonthMaker());
                this.CurrentDayMaker();
            },

            ClearColoredDays: function () {
                for (let i = 0; i < this.Days.length; i++) {
                    var theDay = $('#sp' + i);
                    theDay.css('color', 'rgb(255, 255, 255)');
                }
            },

            PlayingMathMaker: function (month) {
                if (this.PlaingMonthChecker()) {
                    for (let i = 0; i < this.MatchDaysDividedByMonths[month].length; i++) {
                        var theDay = $('#sp' + ((this.DaysBefore - 1) + this.MatchDaysDividedByMonths[month][i].day));
                        theDay.css('color', 'rgb(255, 0, 0)');
                        if (this.MatchDaysDividedByMonths[month][i].day == this.CurrentDay && this.Season.month == this.SinglePlayer.Month) {
                            $('#calendarView').hide()
                            this.MatchBoard();
                        }
                    }
                }
            },

            ArrayMonthMaker: function () {
                var startMonth = new Date(this.Season.year, 0, this.Season.firstMatchDay).getUTCMonth() + 1;
                var month;
                if (this.Season.month >= startMonth && this.Season.month <= 12) {
                    month = this.Season.month - startMonth;
                } else if (this.Season.month == 1) {
                    month = 4;
                }
                return month;
            },

            PlaingMonthChecker: function () {
                var startMonth = new Date(this.Season.year, 0, this.Season.firstMatchDay).getUTCMonth() + 1;
                if ((this.Season.month >= startMonth && this.Season.month <= 12) || this.Season.month == 1) {
                    return true;
                } else {
                    return false;
                }
            },

            CurrentDayMaker: function() {
                var currentDay = $('#sp' + this.Index.toString());
                if (this.Season.month == this.SinglePlayer.Month) {
                    currentDay.css('color', 'rgb(91, 192, 245)');
                }
            },

            SeasonInit: function () {
                this.Fixtures = vueSinglePlayer.Fixtures;
                this.Season.year = this.SinglePlayer.Year;
                this.Season.month = this.SinglePlayer.Month;
                this.Season.Weeek = this.SinglePlayer.Week;
                this.Season.day = this.SinglePlayer.Day;
                this.Season.numberOfRestDays = this.SinglePlayer.NumberOfRestDays;
                this.Season.firstMatchDay = this.SinglePlayer.FirstMatchDay;
                this.SetCalendarMonth(this.Season.year, this.Season.month);
            },

            DayIncrementation: function () {
                var Provider = {}
                Provider.SinglePlayer = vueCalendar.SinglePlayer;
                Provider.Status = 4;

                   $.ajax(
                    {
                        url: "@Url.Action("UpdateDB", "SinglePlayer")",
                        type: "POST",
                        contentType: "application/json",
                        data: JSON.stringify({ provider: Provider }),
                        success: function (data) {
                            if (data != null) {

                            } else {
                                alert(data.ErrorMessage)
                            }
                        },
                        error: function () {
                            alert('Nieoczekiwany błąd');
                        }
                    })
            },

            MatchBoard: function () {
                //  var Provider = {}
                //Provider.SinglePlayer = vueCalendar.SinglePlayer;
                //Provider.Status = 4;

                   $.ajax(
                    {
                        url: "@Url.Action("_MatchBoard", "SinglePlayer")",
                        type: "POST",
                        contentType: "application/json",
                        //data: JSON.stringify({ provider: Provider }),
                       }).done(function (partialViewResult) {
                           $("#content").html(partialViewResult);
                       })
            },

            JQuery: function () {
                //$('#fixtureDialog').hide();
                $('#calendarView').show()
            }
        },
        created: function () {
            this.SinglePlayer = vueSinglePlayer.SinglePlayer;
            this.SeasonInit();
        },
        mounted: function () {
            this.JQuery();
            this.FirstDay();
            this.SeasonStart();
            this.MatchDaysSelector();
        },
    });

</script>



