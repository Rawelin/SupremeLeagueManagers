
<div id="squadView" style="display: none">
    <div class="row ml-0">
        <div class="container-squad">
            @Html.Partial("_Squad_SquadTable")
        </div>
        <div class="container-playerSkills">
            @Html.Partial("_Squad_PlayerSkills")
        </div>
        <div class="container-teamSkill">
            @Html.Partial("_Squad_TeamSkills")
        </div>
        <div class="container-formationPitch">
            @Html.Partial("_Squad_FormationPitch")
            @Html.Partial("_Squad_Sliders")
        </div>
        <div id="dashboard">
            <div><button class="btn btn-info" id="442" v-on:click="FormationChange(1)">4-4-2</button></div>
            <div><button class="btn btn-info mt-1" id="433" v-on:click="FormationChange(2)">4-3-3</button></div>
            <div><button class="btn btn-info mt-1" id="451" v-on:click="FormationChange(3)">4-5-1</button></div>
            <div><button class="btn btn-info mt-1" id="352" v-on:click="FormationChange(4)">3-5-2</button></div>
        </div>
    </div>
</div>

<script src="~/Scripts/GlobalFunctions/FormationColors.js"></script>
<script src="~/Scripts/GlobalFunctions/Skills.js"></script>
<script type="text/javascript">

    var vueSquad = new Vue({
        el: '#squadView',
        data: {
            Selected: [],
            Player: {},
            SinglePlayer: {},
            Team: {},
            Formation: '',
            PlayerPhotoIndex: 0,
            SliderOption: {
                dotSize: 12,
                width: 'auto',
                height: 4,
                contained: false,
                direction: 'ltr',
                data: null,
                min: 0,
                max: 100,
                interval: 1,
                disabled: false,
                clickable: true,
                duration: 0.5,
                adsorb: false,
                lazy: false,
                tooltip: 'active',
                tooltipPlacement: 'top',
                tooltipFormatter: void 0,
                useKeyboard: false,
                keydownHook: null,
                dragOnClick: false,
                enableCross: true,
                fixed: false,
                minRange: void 0,
                maxRange: void 0,
                order: true,
                marks: false,
                dotOptions: void 0,
                process: true,
                dotStyle: void 0,
                railStyle: void 0,
                processStyle: void 0,
                tooltipStyle: void 0,
                stepStyle: void 0,
                stepActiveStyle: void 0,
                labelStyle: void 0,
                labelActiveStyle: void 0,
            },
            SliderObject: {},
        },

        components: {
            'vueSlider': window['vue-slider-component'],
        },

        methods: {

            GetPlayerPhoto: function () {
                var fulname = this.Team.Players[this.PlayerPhotoIndex].Name + this.Team.Players[this.PlayerPhotoIndex].Surname;
                fulname = fulname.replace(" ", "");
                return fulname = '/Content/Resources/Players/' + fulname + '.png';
            },

            TeamEmblem: function () {
                var fulname = this.Team.Name + this.Team.City;
                fulname = fulname.replace(" ", "");
                return fulname = '/Content/Resources/Emblems/' + fulname + '.png';
            },

            TeamFullName: function () {
                var fulname = this.Team.Name + this.Team.City;
                fulname = fulname.replace(" ", "");
                return fulname;
            },

            ShowPlayerSkills: function (index) {
                this.Player = this.Team.Players[index];
                this.PlayerPhotoIndex = index;

            },

            GetPlayerName: function (index) {
                var playerName = this.Team.Players[index].Name + ' ' + this.Team.Players[index].Surname;
                return playerName;
            },

            GetPlayerDynamicSkills: function (index) {
                var skills = this.Team.Players[index].AverageDynamicSkills
                return skills;
            },

            NationalityFlag: function (index) {
                var src = '/Content/Resources/Flags/' + this.Team.Players[index].CountryName + '.png';
                return src;
            },

            CountryFlag: function (countryName) {
                this.Player.CountryName = countryName;
                var src = '/Content/Resources/Flags/' + this.Player.CountryName + '.png';
                return src;
            },

            TShirtsPng: function () {
                var fulname = this.Team.Name + this.Team.City;
                fulname = fulname.replace(" ", "");
                return fulname = '/Content/Resources/TShirts/' + fulname + '.png';
            },

            HighlightPlayer: function (number) {
                if (number == this.PlayerPhotoIndex) {
                    return 'grey';
                }
            },

            ProgressBarColor: function (stamina) {

                if (stamina >= 80) {
                    return 'progress-bar progress-bar-striped progress-bar-animated bg-success';
                } else if (stamina < 80 && stamina >= 40) {
                    return 'progress-bar progress-bar-striped progress-bar-animated bg-warning';
                } else if (stamina < 40) {
                    return 'progress-bar progress-bar-striped progress-bar-animated bg-danger';
                }
            },

            ProgressText: function (stamina) {
                if (stamina < 40) {
                    return '';
                } else {
                    return stamina + '%';
                }
            },

            SkillsColor: function (value) {

                if (value >= 95) {
                    return 'red';
                } else if (value >= 90 && value < 95) {
                    return 'indianred';
                } else if (value >= 80 && value < 90) {
                    return 'orange';
                } else if (value >= 70 && value < 80) {
                    return 'lightgreen';
                }
                else {
                    return 'white';
                }
            },

            FormationPitch: function (formation) {

                this.F442 = this.F433 = this.F451 = this.F352 = true;

                switch (formation) {
                    case 1:
                        this.F442 = false;
                        break;
                    case 2:
                        this.F433 = false;
                        break;
                    case 3:
                        this.F451 = false;
                        break;
                    case 4:
                        this.F352 = false;
                        break;
                }
            },

            FormationColors: function (formationId) {

                switch (formationId) {
                    case 1:
                        formation442();
                        this.FormationPitch(formationId);
                        break;
                    case 2:
                        formation433();
                        this.FormationPitch(formationId);
                        break;
                    case 3:
                        formation451();
                        this.FormationPitch(formationId);
                        break;
                    case 4:
                        formation352();
                        this.FormationPitch(formationId);
                        break;
                }
            },

            HoverRow: function () {
                $('#squadBody tr').hover(
                    function () {
                        this.beforeHover = $(this).css('background-color');
                        $(this).css('background', 'rgba(200, 187, 201, 0.3)');
                    },
                    function () {
                        $(this).css('background', this.beforeHover)

                    });
            },

            SetTeamSkills: function () {
                TeamSkills(this.Team);
            },

            SetPlayerDynamicSkills: function () {

                for (var i = 0; i < this.Team.Players.length; i++) {
                    PlayerSkillsDynamic(this.Team.Players[i], this.Team.Formation);
                    if (this.Team.Players[i].IndexPosition > 10) {
                        this.Team.Players[i].AverageDynamicSkills = 0;
                    }
                }
            },

            SetPlayersAverageSkills: function () {

                for (var i = 0; i < this.Team.Players.length; i++) {
                    PlayerSkills(this.Team.Players[i]);
                }
            },

            FormationChange: function (formationId){

                var Provider = {}
               
                Provider.TeamId = this.Team.SPTeamId;
                Provider.FormationId = formationId;
                Provider.Status = 2;

                this.FormationColors(formationId);
                this.Formation = formationId;
                this.Team.Formation = formationId;
                this.SetTeamSkills();

                $.ajax(
                    {
                        url: "@Url.Action("UpdateDB", "SinglePlayer")",
                        type: "POST",
                        contentType: "application/json",
                        data: JSON.stringify({ provider: Provider }),
                        success: function (data) {
                            if (data != null) {

                            } else {
                                alert(data.ErrorMessage)
                            }
                        },
                        error: function () {
                            alert('Nieoczekiwany błąd');
                        }
                    })
            },

            SwapPlayer: function (playerOne, playerTwo) {

                var Provider = {};

                Provider.PlayerOne = playerOne;
                Provider.PlayerTwo = playerTwo;
                Provider.Status = 1;

                $.ajax(
                    {
                        url: "UpdateDB/SinglePlayer",
                        type: "POST",
                        contentType: "application/json",
                        data: JSON.stringify({ provider: Provider }),
                        success: function (data) {
                            if (data != null) {

                            } else {
                                alert(data.ErrorMessage)
                            }
                        },
                        error: function () {
                            alert('Nieoczekiwany błąd');
                        }
                    })
            },

            TeamSettingsChange: function () {
                var Provider = {};

                console.log(vueSquad.SliderObject);

                Provider.SliderObject = vueSquad.SliderObject;
                Provider.TeamId = this.Team.SPTeamId;
                Provider.Status = 3;

                $.ajax(
                    {
                        url: "UpdateDB/SinglePlayer",
                        type: "POST",
                        contentType: "application/json",
                        data: JSON.stringify({ provider: Provider }),
                        success: function (data) {
                            if (data != null) {

                            } else {
                                alert(data.ErrorMessage)
                            }
                        },
                        error: function () {
                            alert('Nieoczekiwany błąd');
                        }
                    })
            },

            ChangePlayer: function (index) {

                // if clicked the same player again remove from array
                if (this.Selected.includes(index)) {
                    const arrayIndex = this.Selected.indexOf(index);
                    if (arrayIndex > -1) {
                        this.Selected.splice(arrayIndex, 1);
                        this.Team.Players[index].Selected = false
                    }
                } else { // else add second player to swap
                    this.Selected.push(index);
                    this.Team.Players[index].Selected = true;
                }
                // if array contains 2 player swap them
                if (this.Selected.length == 2) {

                    // players position in table squadTable of _TeamSqad.cshtml (the same value like field L.P of [SLM].[dbo].[dictTeamsPlayers] )
                    var playerOne = this.Selected.shift();
                    var playerTwo = this.Selected.shift();

                    // swap indexPosition L.P.
                    var indexPositionPlayerTmp = this.Team.Players[playerOne].IndexPosition
                    this.Team.Players[playerOne].IndexPosition = this.Team.Players[playerTwo].IndexPosition;
                    this.Team.Players[playerTwo].IndexPosition = indexPositionPlayerTmp;

                    // swap players position
                    var PlayerTmp = this.Team.Players[playerOne];
                    this.Team.Players[playerOne] = this.Team.Players[playerTwo];
                    this.Team.Players[playerTwo] = PlayerTmp;

                    // restore inputs checbox to unchecked
                    this.Team.Players[playerOne].Selected = false;
                    this.Team.Players[playerTwo].Selected = false;

                    this.SetPlayerDynamicSkills();
                    this.SetTeamSkills();
                    this.SetPlayersAverageSkills();

                    // send changes to DB
                    this.SwapPlayer(this.Team.Players[playerOne], this.Team.Players[playerTwo]);
                }
            },

            SetTeamSettings: function () {
                this.Team.Pressing = this.SliderObject.Pressing;
                this.Team.AttackLevel = this.SliderObject.AttackLevel;
                this.Team.Aggression = this.SliderObject.Aggression;
                //console.log(this.Team.Pressing);
                //this.TeamSettingsChange();
            },

            InitializeSliderObject: function () {
                this.SliderObject.Pressing = this.Team.Pressing;
                this.SliderObject.AttackLevel = this.Team.AttackLevel;
                this.SliderObject.Aggression = this.Team.Aggression;

              
            },

            FormationMenu: function () {
                $('#dashboard').hover(

                    function () {
                        $(this).stop().animate(
                            {
                                right: '5',
                            },
                            500,
                            'easeInSine'
                        );
                    },
                    function () {
                        $(this).stop().animate(
                            {
                                right: '-80',
                            },
                            1500,
                            'easeOutBounce'
                        );
                    });
            },
        },

        created: function () {
            this.SinglePlayer = vueSinglePlayer.SinglePlayer;
            this.Team = vueSinglePlayer.Teams.find(t => t.TeamId == this.SinglePlayer.IdTeam);
            this.Formation = this.Team.Formation;
            this.FormationPitch(this.Formation);
            this.SetTeamSkills();
            this.SetPlayerDynamicSkills();
            this.InitializeSliderObject();
        },
        mounted: function () {
            $('#squadView').show();
            this.SetPlayersAverageSkills();
            this.FormationColors(this.Formation);
            this.HoverRow();
            this.FormationMenu();
            this.Player = this.Team.Players[0];
        },
    });

</script>
